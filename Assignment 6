#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

// Define a mutex variable
pthread_mutex_t mutex;

// Shared variable
int shared_data = 0;

// Writer thread function
void* writer_thread(void* arg) {
    pthread_mutex_lock(&mutex); // Lock before writing

    // Writing to shared variable
    shared_data = 42;
    printf("Thread_1 (Writer): Written shared_data = %d\n", shared_data);

    pthread_mutex_unlock(&mutex); // Unlock after writing
    return NULL;
}

// Reader thread function
void* reader_thread(void* arg) {
    sleep(1); // Ensure writer executes first
    pthread_mutex_lock(&mutex); // Lock before reading

    // Reading shared variable
    printf("Thread_2 (Reader): Read shared_data = %d\n", shared_data);

    pthread_mutex_unlock(&mutex); // Unlock after reading
    return NULL;
}

int main() {
    pthread_t thread1, thread2;

    // Initialize the mutex
    pthread_mutex_init(&mutex, NULL);

    // Create writer and reader threads
    pthread_create(&thread1, NULL, writer_thread, NULL);
    pthread_create(&thread2, NULL, reader_thread, NULL);

    // Wait for threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    // Destroy the mutex
    pthread_mutex_destroy(&mutex);

    return 0;
}
