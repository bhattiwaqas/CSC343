#1. Stacks and Heaps are not shared because they create have their own copies. SHared memory segments are shared between parent and child however because they need to share the necessary memory.
#2. IOS and Android have different mechanisms for concurrent processing. IOS uses a low level APi, has a high level abstraction on top of the GCD and has limited background execution. However, Android has long-running background operations, and has a worker thread for background tasks. The three major complications that concurrent processing adds to an OS are resource management (shared resources,) synchronization (access to shared resources should be one at a time,) and deadlock prevention (one can't be waiting for another if the other is locked.)
#3. 


#include <iostream>
#include <cstdlib>
#include <ctime>
#include <unistd.h>
#include <sys/wait.h>

const int size = 20;

int main() {
    int arr[size];
    int fd[2];
    pid_t pid;

    std::srand(std::time(nullptr));

    // fill array with random numbers
    for (int i = 0; i < size; ++i) {
        arr[i] = std::rand() % 100;
    }
    
    // print array
    for (int num : arr) {
    std::cout << num << " ";
    }
    std::cout<<std::endl;
    

    // Create a pipe
    if (pipe(fd) == -1) {
        std::cerr << "Pipe creation failed" << std::endl;
        return 1;
    }
    else{
        std::cout << "Pipe created successfully" << std::endl;
    }
    
    // Create a child process
    pid = fork();

    if (pid < 0) {
        std::cerr << "Fork failed" << std::endl;
        return 1;
    } 
    else if (pid == 0) {// Child process
        close(fd[0]); // Close read end

        // Find minimum in second half
        int min_child = arr[size/2];
        for (int i = size/2 + 1; i < size; ++i) {
            if (arr[i] < min_child) {
                min_child = arr[i];
            }
        }

        std::cout << "Child process (PID " << getpid() << ") minimum: " << min_child << std::endl;

        // Send result to parent
        write(fd[1], &min_child, sizeof(min_child));
        close(fd[1]);

        return 0;
    } else {
        // Parent process
        close(fd[1]); // Close write end

        // Find minimum in first half
        int min_parent = arr[0];
        for (int i = 1; i < size/2; ++i) {
            if (arr[i] < min_parent) {
                min_parent = arr[i];
            }
        }

        std::cout << "Parent process (PID " << getpid() << ") minimum: " << min_parent << std::endl;

        // Parent read child's result
        int min_child;
        read(fd[0], &min_child, sizeof(min_child));
        close(fd[0]);

        // Wait for child to finish
        wait(nullptr);



        int min;
        // Find overall minimum
        if (min_parent<min_child){
            min = min_parent;
        }
        else{
            min = min_child;
        }
  
        std::cout << "Overall minimum of the array: " << min << std::endl;
    }

    return 0;
}
